# Generated by Django 5.0.2 on 2024-02-10 04:03

import api.models
import rokaf_crawler.models
import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Trainee',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20)),
                ('birthday', models.DateField()),
                ('member_seq', models.CharField(max_length=100)),
                ('agency_id', api.models.IntEnumField(default=rokaf_crawler.models.AgencyIndex['기본군사훈련단'], enum=rokaf_crawler.models.AgencyIndex)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('is_trainee', models.BooleanField(default=False)),
                ('zipcode', models.CharField(max_length=7)),
                ('addr1', models.CharField(max_length=200)),
                ('addr2', models.CharField(max_length=200)),
                ('name', models.CharField(max_length=20)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
                ('as_trainee', models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='as_user', to='api.trainee')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Letter',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('senderZipcode', models.CharField(max_length=7)),
                ('senderAddr1', models.CharField(max_length=200)),
                ('senderAddr2', models.CharField(max_length=200)),
                ('senderName', models.CharField(max_length=100)),
                ('relationship', models.CharField(max_length=100)),
                ('title', models.CharField(max_length=100)),
                ('contents', models.TextField()),
                ('password', models.CharField(max_length=100)),
                ('reserved_date', models.DateField(null=True)),
                ('status', api.models.IntEnumField(default=api.models.LetterStatus['EDITING'], enum=api.models.LetterStatus)),
                ('sender', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='sent_letters', to=settings.AUTH_USER_MODEL)),
                ('receiver', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='received_letters', to='api.trainee')),
            ],
        ),
        migrations.CreateModel(
            name='TraineeToUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('relationship', models.CharField(max_length=100)),
                ('trainee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.trainee')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='user',
            name='like_trainees',
            field=models.ManyToManyField(through='api.TraineeToUser', to='api.trainee'),
        ),
    ]
